//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Just.Net.InternalClient;
using Just.Net.Models;
using Just.Net.Requests;
using Just.Net.Responses;

namespace Just.Net.InternalClient
{
 
    internal partial class QuerySoapClient : System.ServiceModel.ClientBase<QuerySoap>, QuerySoap, IDisposable
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

        public QuerySoapClient():
            this(EndpointConfiguration.QuerySoap)
        {
            
        }
        public QuerySoapClient(EndpointConfiguration endpointConfiguration) : 
                base(QuerySoapClient.GetBindingForEndpoint(endpointConfiguration), QuerySoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public QuerySoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(QuerySoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public QuerySoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(QuerySoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public QuerySoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        HelloWorldResponse QuerySoap.HelloWorld(HelloWorldRequest request)
        {
            return base.Channel.HelloWorld(request);
        }
        
        public string HelloWorld()
        {
            HelloWorldRequest inValue = new HelloWorldRequest();
            inValue.Body = new HelloWorldRequestBody();
            HelloWorldResponse retVal = ((QuerySoap)(this)).HelloWorld(inValue);
            return retVal.Body.HelloWorldResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<HelloWorldResponse> QuerySoap.HelloWorldAsync(HelloWorldRequest request)
        {
            return base.Channel.HelloWorldAsync(request);
        }
        
        public System.Threading.Tasks.Task<HelloWorldResponse> HelloWorldAsync()
        {
            HelloWorldRequest inValue = new HelloWorldRequest();
            inValue.Body = new HelloWorldRequestBody();
            return ((QuerySoap)(this)).HelloWorldAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CautareDosareResponse QuerySoap.CautareDosare(CautareDosareRequest request)
        {
            return base.Channel.CautareDosare(request);
        }
        
        public List<Dosar> CautareDosare(string numarDosar, string obiectDosar, string numeParte, System.Nullable<Institutie> institutie, System.Nullable<System.DateTime> dataStart, System.Nullable<System.DateTime> dataStop)
        {
            CautareDosareRequest inValue = new CautareDosareRequest();
            inValue.Body = new CautareDosareRequestBody();
            inValue.Body.numarDosar = numarDosar;
            inValue.Body.obiectDosar = obiectDosar;
            inValue.Body.numeParte = numeParte;
            inValue.Body.institutie = institutie;
            inValue.Body.dataStart = dataStart;
            inValue.Body.dataStop = dataStop;
            CautareDosareResponse retVal = ((QuerySoap)(this)).CautareDosare(inValue);
            return retVal.Body.CautareDosareResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CautareDosareResponse> QuerySoap.CautareDosareAsync(CautareDosareRequest request)
        {
            return base.Channel.CautareDosareAsync(request);
        }
        
        public System.Threading.Tasks.Task<CautareDosareResponse> CautareDosareAsync(string numarDosar, string obiectDosar, string numeParte, System.Nullable<Institutie> institutie, System.Nullable<System.DateTime> dataStart, System.Nullable<System.DateTime> dataStop)
        {
            CautareDosareRequest inValue = new CautareDosareRequest();
            inValue.Body = new CautareDosareRequestBody();
            inValue.Body.numarDosar = numarDosar;
            inValue.Body.obiectDosar = obiectDosar;
            inValue.Body.numeParte = numeParte;
            inValue.Body.institutie = institutie;
            inValue.Body.dataStart = dataStart;
            inValue.Body.dataStop = dataStop;
            return ((QuerySoap)(this)).CautareDosareAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CautareDosare2Response QuerySoap.CautareDosare2(CautareDosare2Request request)
        {
            return base.Channel.CautareDosare2(request);
        }
        
        public List<Dosar> CautareDosare2(string numarDosar, string obiectDosar, string numeParte, System.Nullable<Institutie> institutie, System.Nullable<System.DateTime> dataStart, System.Nullable<System.DateTime> dataStop, System.Nullable<System.DateTime> dataUltimaModificareStart, System.Nullable<System.DateTime> dataUltimaModificareStop)
        {
            CautareDosare2Request inValue = new CautareDosare2Request();
            inValue.Body = new CautareDosare2RequestBody();
            inValue.Body.numarDosar = numarDosar;
            inValue.Body.obiectDosar = obiectDosar;
            inValue.Body.numeParte = numeParte;
            inValue.Body.institutie = institutie;
            inValue.Body.dataStart = dataStart;
            inValue.Body.dataStop = dataStop;
            inValue.Body.dataUltimaModificareStart = dataUltimaModificareStart;
            inValue.Body.dataUltimaModificareStop = dataUltimaModificareStop;
            CautareDosare2Response retVal = ((QuerySoap)(this)).CautareDosare2(inValue);
            return retVal.Body.CautareDosare2Result;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CautareDosare2Response> QuerySoap.CautareDosare2Async(CautareDosare2Request request)
        {
            return base.Channel.CautareDosare2Async(request);
        }
        
        public System.Threading.Tasks.Task<CautareDosare2Response> CautareDosare2Async(string numarDosar, string obiectDosar, string numeParte, System.Nullable<Institutie> institutie, System.Nullable<System.DateTime> dataStart, System.Nullable<System.DateTime> dataStop, System.Nullable<System.DateTime> dataUltimaModificareStart, System.Nullable<System.DateTime> dataUltimaModificareStop)
        {
            CautareDosare2Request inValue = new CautareDosare2Request();
            inValue.Body = new CautareDosare2RequestBody();
            inValue.Body.numarDosar = numarDosar;
            inValue.Body.obiectDosar = obiectDosar;
            inValue.Body.numeParte = numeParte;
            inValue.Body.institutie = institutie;
            inValue.Body.dataStart = dataStart;
            inValue.Body.dataStop = dataStop;
            inValue.Body.dataUltimaModificareStart = dataUltimaModificareStart;
            inValue.Body.dataUltimaModificareStop = dataUltimaModificareStop;
            return ((QuerySoap)(this)).CautareDosare2Async(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CautareSedinteResponse QuerySoap.CautareSedinte(CautareSedinteRequest request)
        {
            return base.Channel.CautareSedinte(request);
        }
        
        public List<Sedinta> CautareSedinte(System.DateTime dataSedinta, Institutie institutie)
        {
            CautareSedinteRequest inValue = new CautareSedinteRequest();
            inValue.Body = new CautareSedinteRequestBody();
            inValue.Body.dataSedinta = dataSedinta;
            inValue.Body.institutie = institutie;
            CautareSedinteResponse retVal = ((QuerySoap)(this)).CautareSedinte(inValue);
            return retVal.Body.CautareSedinteResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CautareSedinteResponse> QuerySoap.CautareSedinteAsync(CautareSedinteRequest request)
        {
            return base.Channel.CautareSedinteAsync(request);
        }
        
        public System.Threading.Tasks.Task<CautareSedinteResponse> CautareSedinteAsync(System.DateTime dataSedinta, Institutie institutie)
        {
            CautareSedinteRequest inValue = new CautareSedinteRequest();
            inValue.Body = new CautareSedinteRequestBody();
            inValue.Body.dataSedinta = dataSedinta;
            inValue.Body.institutie = institutie;
            return ((QuerySoap)(this)).CautareSedinteAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.QuerySoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.QuerySoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.QuerySoap))
            {
                return new System.ServiceModel.EndpointAddress("http://portalquery.just.ro/query.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.QuerySoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://portalquery.just.ro/query.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            QuerySoap,
            
            QuerySoap12,
        }
    }
}
